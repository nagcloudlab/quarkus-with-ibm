
-----------------------------------------------------------------
Quarkus Overview
-----------------------------------------------------------------

-> what , why & how it differ from existing solutions

-----------------------------------------------------------------
1.introduction
-----------------------------------------------------------------

1. scaffolding a Quarkus project with Maven

 - mvn io.quarkus:quarkus-maven-plugin:1.7.2.Final:create

2. scaffolding a Quarkus project with Gradle

 - mvn io.quarkus:quarkus-maven-plugin:1.7.2.Final:create -DbuildTool=gradle

3. scaffolding a Quarkus project with Quarkus start coding website

4. scaffolding a Quarkus project with VS-code / Eclipse / Intellij-IDEA


-----------------------------------------------------------------
2.developer friendly
-----------------------------------------------------------------

1. Live Reloading with Dev Mode


-----------------------------------------------------------------
3. Developing RESTful services
-----------------------------------------------------------------

using JAX-RS spec

     implementation(s)

        - RESTEasy    ( jboss community )
 

1. creating a simple REST api Endpoint
2. extracting request parameters
    -  query/path/header/cookie/form/matrix parameters
3. using semantic HTTP Response codes
    - https://developer.mozilla.org/en-US/docs/Web/HTTP/Status
4. binding HTTP methods
5. enabling cross-origin-resource-sharing ( cors )
6. Intercepting HTTP requests using Vertx filters

-----------------------------------------------------------------

imp-note :
in quarkus, we can write HTTP Endpoints in 2 ways


    => JAX-RS resource
    => reactive routes using Vertx

-----------------------------------------------------------------
4. configuration with Quarkus
-----------------------------------------------------------------


  1. configuring the application with custom properties
  2. accessing configuration properties programmatically
  3. configuring with profiles

      => dev, test, prod

  4. configuring with custom profiles

  5. creating custom sources
   


-----------------------------------------------------------------
5. Logging
-----------------------------------------------------------------
   


1. changing Logger configuration

2. Adavanced Logging

    - GELF  with ELK 
    - JSON




-----------------------------------------------------------------
5. Programming Model
-----------------------------------------------------------------

 -> Marshalling/Unmarshalling JSON
 -> Marshalling/Unmarshalling XML
 -> Validating Input And Output value
 
     -> using validator api ( javax.validator.* )  : JSR 303 spec

 -> Injecting dependencies

      => imp-note : quarkus is based on CDI spec  for DI

 -> Using Named Qualifier

 -> Using Custom Qualifier
  
 -> Creating Factories

 -> Executing Object/Component Life Cycle Events

 -> Executing Application Life Cycle Events

 -> Creating Interceptors


--------------------------------------------------------------
6. Package Quarkus Application
--------------------------------------------------------------

1. Running in command-line

JVM envi
-----------

2. creating a Runnable JAR file ( thin jar )
3. Uber-JAR Packaging

Native Envi
--------------

4. Building a Native executable 

Container Envi
---------------

5. Building a Docker Container for JAR file
6. Building a Docker Container for Native file

 

--------------------------------------------------------------
7. Persistence
--------------------------------------------------------------


1. define a datasource

    - Agroal

2. Using Multiple datasources


3. data-access patterns in Quarkus

    2 patterns

    -> active-record pattern ( using panache   )
    -> respository pattern


--------------------------------------------------------------
8. Microprofile spec
--------------------------------------------------------------

    - FaultTolerent
    - Health
    - Meterics
    - Distributed Tracing
    - Open Api
    - REST Client


--------------------------------------------------------------
9. Quarkus Application on Kubernetes cluster / OpenShift
--------------------------------------------------------------


  -> Building & Pushing Container Images

    extensions
    --------------
        - jib
        - docker
        - s2i